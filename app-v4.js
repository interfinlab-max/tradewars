// –¢–æ—Ä–≥–æ–≤—ã–µ –≤–æ–π–Ω—ã V4.0 - –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç
// –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Å–∏–º—É–ª—è—Ç–æ—Ä –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏

// –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
const COUNTRIES = {
    "US": {
        name: "–°–®–ê",
        flag: "üá∫üá∏",
        difficulty: "–õ–µ–≥–∫–∞—è",
        bonus: 3,
        specialties: ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "—Ñ–∏–Ω–∞–Ω—Å—ã", "—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞", "–∞–≥—Ä–æ–ø—Ä–æ–º"],
        base_modifiers: {gdpIdx: 10, expIdx: 0, impIdx: 10, cpi: -0.3, unemployment: -0.5}
    },
    "CN": {
        name: "–ö–∏—Ç–∞–π",
        flag: "üá®üá≥",
        difficulty: "–ü—Ä–æ—Å—Ç–∞—è",
        bonus: 5,
        specialties: ["–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "—ç–∫—Å–ø–æ—Ä—Ç", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞"],
        base_modifiers: {gdpIdx: 8, expIdx: 15, impIdx: 5, cpi: 0.2, unemployment: -1.5}
    },
    "DE": {
        name: "–ì–µ—Ä–º–∞–Ω–∏—è",
        flag: "üá©üá™",
        difficulty: "–°—Ä–µ–¥–Ω—è—è",
        bonus: 8,
        specialties: ["–∞–≤—Ç–æ–ø—Ä–æ–º", "–º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ", "—Ö–∏–º–∏—è", "—ç–∫—Å–ø–æ—Ä—Ç"],
        base_modifiers: {gdpIdx: 5, expIdx: 8, impIdx: 3, cpi: -0.5, unemployment: -1.0}
    },
    "JP": {
        name: "–Ø–ø–æ–Ω–∏—è",
        flag: "üáØüáµ",
        difficulty: "–°–ª–æ–∂–Ω–∞—è",
        bonus: 10,
        specialties: ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–∞–≤—Ç–æ–ø—Ä–æ–º", "—Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞", "—Ç–æ—á–Ω–æ–µ –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ"],
        base_modifiers: {gdpIdx: 3, expIdx: 5, impIdx: 8, cpi: -0.8, unemployment: -0.3}
    },
    "RU": {
        name: "–†–æ—Å—Å–∏—è",
        flag: "üá∑üá∫",
        difficulty: "–û—á–µ–Ω—å —Å–ª–æ–∂–Ω–∞—è",
        bonus: 12,
        specialties: ["—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞", "—Å—ã—Ä—å—ë", "IT", "–æ–±–æ—Ä–æ–Ω–ø—Ä–æ–º"],
        base_modifiers: {gdpIdx: 0, expIdx: 5, impIdx: -3, cpi: 0.5, unemployment: 1.0}
    },
    "BR": {
        name: "–ë—Ä–∞–∑–∏–ª–∏—è",
        flag: "üáßüá∑",
        difficulty: "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ —Å–ª–æ–∂–Ω–∞—è",
        bonus: 15,
        specialties: ["–∞–≥—Ä–æ–ø—Ä–æ–º", "—Å—ã—Ä—å—ë", "—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞", "–º–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è"],
        base_modifiers: {gdpIdx: -2, expIdx: 3, impIdx: -5, cpi: 1.5, unemployment: 2.0}
    }
};

const GAME_MODES = {
    normal: {turns: 12, static: true, effectsVisible: true, multiplier: 1.0, years: 3},
    hard: {turns: 15, static: false, effectsVisible: true, multiplier: 1.5, years: 5},
    blind: {turns: 15, static: false, effectsVisible: false, multiplier: 1.0, years: 5}
};

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å 3-4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤—ã–±–æ—Ä–∞
function generateScenarios() {
    const GENERAL_SCENARIOS = [
        {
            id: "steel-dumping",
            title: "–î–µ–º–ø–∏–Ω–≥ —Å—Ç–∞–ª–∏",
            text: "–î–µ—à–µ–≤–∞—è —Å—Ç–∞–ª—å –∏–∑-–∑–∞ —Ä—É–±–µ–∂–∞ –¥–∞–≤–∏—Ç –Ω–∞ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å. –ú–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏ —Ç—Ä–µ–±—É—é—Ç –∑–∞—â–∏—Ç—ã.",
            type: "general",
            choices: [
                {
                    id: "high-tariff",
                    icon: "fa-solid fa-industry",
                    label: "–í—ã—Å–æ–∫–∏–µ —Ç–∞—Ä–∏—Ñ—ã (25%)",
                    hint: "–ë—ã—Å—Ç—Ä–∞—è –∑–∞—â–∏—Ç–∞ ‚Üí —Ä–∏—Å–∫ –æ—Ç–≤–µ—Ç–Ω—ã—Ö –º–µ—Ä",
                    effect: {gdp: -1.3, exp: -1.9, imp: -2.5, cpi: 0.3, unemployment: -0.5, trust: -5},
                    tags: ["—Ç–∞—Ä–∏—Ñ—ã", "—ç—Å–∫–∞–ª–∞—Ü–∏—è"],
                    economicTheory: "–¢–∞—Ä–∏—Ñ—ã —Å–æ–∑–¥–∞—é—Ç –º–µ—Ä—Ç–≤—ã–π –≥—Ä—É–∑ –ø–æ—Ç–µ—Ä—å –¥–ª—è –æ–±—â–µ—Å—Ç–≤–∞, —Å–Ω–∏–∂–∞—è –±–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π –±–æ–ª—å—à–µ, —á–µ–º —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –ø—Ä–∏–±—ã–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π.",
                    history: "–í 2018 –≥–æ–¥—É –°–®–ê –≤–≤–µ–ª–∏ –ø–æ—à–ª–∏–Ω—ã –Ω–∞ —Å—Ç–∞–ª—å –≤ 25%, —á—Ç–æ –ø—Ä–∏–≤–µ–ª–æ –∫ —Ä–æ—Å—Ç—É —Ü–µ–Ω –Ω–∞ 30% –∏ –æ—Ç–≤–µ—Ç–Ω—ã–º –º–µ—Ä–∞–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –Ω–∞ $13.2 –º–ª—Ä–¥."
                },
                {
                    id: "moderate-tariff",
                    icon: "fa-solid fa-balance-scale",
                    label: "–£–º–µ—Ä–µ–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã (10%)",
                    hint: "–ö–æ–º–ø—Ä–æ–º–∏—Å—Å –º–µ–∂–¥—É –∑–∞—â–∏—Ç–æ–π –∏ —Ç–æ—Ä–≥–æ–≤–ª–µ–π",
                    effect: {gdp: -0.5, exp: -0.8, imp: -1.2, cpi: 0.1, unemployment: -0.2, trust: -2},
                    tags: ["—Ç–∞—Ä–∏—Ñ—ã", "–∫–æ–º–ø—Ä–æ–º–∏—Å—Å"],
                    economicTheory: "–£–º–µ—Ä–µ–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –∑–∞—â–∏—Ç–∞ –º–æ–∂–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –æ—Ç—Ä–∞—Å–ª—å, –Ω–æ —Å–Ω–∏–∂–∞–µ—Ç —Å—Ç–∏–º—É–ª—ã –∫ –ø–æ–≤—ã—à–µ–Ω–∏—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.",
                    history: "–ï–° —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–Ω—Ç–∏–¥–µ–º–ø–∏–Ω–≥–æ–≤—ã–µ –ø–æ—à–ª–∏–Ω—ã 5-15% –∫–∞–∫ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å –º–µ–∂–¥—É –∑–∞—â–∏—Ç–æ–π –∏ –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å—é —Ä—ã–Ω–∫–æ–≤."
                },
                {
                    id: "wto-complaint",
                    icon: "fa-solid fa-gavel",
                    label: "–ñ–∞–ª–æ–±–∞ –≤ –í–¢–û",
                    hint: "–î–æ–ª–≥–∏–π –ø—Ä–æ—Ü–µ—Å—Å, –Ω–æ –∑–∞–∫–æ–Ω–Ω—ã–π –ø—É—Ç—å",
                    effect: {gdp: 0.2, exp: 0.5, imp: 0.1, cpi: -0.1, unemployment: 0.1, trust: 3},
                    tags: ["–í–¢–û", "–¥–∏–ø–ª–æ–º–∞—Ç–∏—è"],
                    economicTheory: "–ú–Ω–æ–≥–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å –∏ –≤–µ—Ä—Ö–æ–≤–µ–Ω—Å—Ç–≤–æ –ø—Ä–∞–≤–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ.",
                    history: "–ö–∏—Ç–∞–π –≤—ã–∏–≥—Ä–∞–ª 15 –∏–∑ 21 –¥–µ–ª–∞ –≤ –í–¢–û –ø—Ä–æ—Ç–∏–≤ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –°–®–ê –≤ 2018-2020 –≥–æ–¥–∞—Ö."
                },
                {
                    id: "subsidize-local",
                    icon: "fa-solid fa-hand-holding-usd",
                    label: "–°—É–±—Å–∏–¥–∏–∏ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è–º",
                    hint: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–µ–∑ –±–∞—Ä—å–µ—Ä–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞",
                    effect: {gdp: 0.8, exp: 1.2, imp: 0.3, cpi: 0.2, unemployment: -0.8, trust: 1},
                    tags: ["—Å—É–±—Å–∏–¥–∏–∏", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞"],
                    economicTheory: "–°—É–±—Å–∏–¥–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è–º –º–æ–≥—É—Ç –ø–æ–≤—ã—Å–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –±–∞—Ä—å–µ—Ä–æ–≤.",
                    history: "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–≤–∏–∞—Å—Ç—Ä–æ–µ–Ω–∏—è Airbus –≤ –ï–° –ø–æ–º–æ–≥–ª–∞ —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ Boeing."
                }
            ]
        },
        {
            id: "currency-manipulation",
            title: "–í–∞–ª—é—Ç–Ω–∞—è –≤–æ–π–Ω–∞",
            text: "–¢–æ—Ä–≥–æ–≤—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –æ–±–≤–∏–Ω–µ–Ω –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∑–∞–Ω–∏–∂–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞.",
            type: "general",
            choices: [
                {
                    id: "currency-intervention",
                    icon: "fa-solid fa-coins",
                    label: "–í–∞–ª—é—Ç–Ω–∞—è –∏–Ω—Ç–µ—Ä–≤–µ–Ω—Ü–∏—è",
                    hint: "–û—Å–ª–∞–±–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –≤–∞–ª—é—Ç—É",
                    effect: {gdp: 1.2, exp: 2.8, imp: -1.5, cpi: 0.8, unemployment: -0.8, trust: -8},
                    tags: ["–≤–∞–ª—é—Ç–∞", "–∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è"],
                    economicTheory: "–í–∞–ª—é—Ç–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–µ–Ω—Ü–∏–∏ –º–æ–≥—É—Ç —É–ª—É—á—à–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ, –Ω–æ —Å–æ–∑–¥–∞—é—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∏—Å–±–∞–ª–∞–Ω—Å—ã.",
                    history: "–®–≤–µ–π—Ü–∞—Ä–∏—è –ø–æ—Ç—Ä–∞—Ç–∏–ª–∞ $100 –º–ª—Ä–¥ –Ω–∞ —Å–¥–µ—Ä–∂–∏–≤–∞–Ω–∏–µ —Ä–æ—Å—Ç–∞ —Ñ—Ä–∞–Ω–∫–∞ –≤ 2011-2015 –≥–æ–¥–∞—Ö."
                },
                {
                    id: "diplomatic-pressure",
                    icon: "fa-solid fa-handshake",
                    label: "–î–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ",
                    hint: "–ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ",
                    effect: {gdp: 0.3, exp: 0.5, imp: 0.2, cpi: 0.0, unemployment: 0.0, trust: 2},
                    tags: ["–¥–∏–ø–ª–æ–º–∞—Ç–∏—è", "–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã"],
                    economicTheory: "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –≤–∞–ª—é—Ç–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç—ã —Å–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫ –≤–∞–ª—é—Ç–Ω—ã—Ö –≤–æ–π–Ω.",
                    history: "–°–æ–≥–ª–∞—à–µ–Ω–∏—è –ü–ª–∞–∑–∞ (1985) –∏ –õ—É–≤—Ä–∞ (1987) –ø–æ–∫–∞–∑–∞–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –≤–∞–ª—é—Ç–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏ G7."
                },
                {
                    id: "ignore-manipulation",
                    icon: "fa-solid fa-eye-slash",
                    label: "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å",
                    hint: "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏",
                    effect: {gdp: -0.2, exp: -0.5, imp: 0.8, cpi: -0.3, unemployment: 0.2, trust: 0},
                    tags: ["–Ω–µ–≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ", "—Ä—ã–Ω–æ–∫"],
                    economicTheory: "–†—ã–Ω–æ—á–Ω—ã–µ —Å–∏–ª—ã –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—Ç –≤–∞–ª—é—Ç–Ω—ã–µ –¥–∏—Å–±–∞–ª–∞–Ω—Å—ã –ª—É—á—à–µ –∏–Ω—Ç–µ—Ä–≤–µ–Ω—Ü–∏–π.",
                    history: "–ì–µ—Ä–º–∞–Ω–∏—è –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è –Ω–µ –≤–º–µ—à–∏–≤–∞–ª–∞—Å—å –≤ –∫—É—Ä—Å –µ–≤—Ä–æ, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –∫—Ä–∏—Ç–∏–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤."
                }
            ]
        },
        {
            id: "tech-transfer",
            title: "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
            text: "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Ç—Ä–µ–±—É—é—Ç –¥–æ—Å—Ç—É–ø –∫ –º–µ—Å—Ç–Ω—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º –≤ –æ–±–º–µ–Ω –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏.",
            type: "general",
            choices: [
                {
                    id: "tech-protection",
                    icon: "fa-solid fa-shield-alt",
                    label: "–ó–∞—â–∏—Ç–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
                    hint: "–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É",
                    effect: {gdp: -0.8, exp: -1.2, imp: 0.5, cpi: 0.2, unemployment: 0.3, trust: -3},
                    tags: ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–∑–∞—â–∏—Ç–∞"],
                    economicTheory: "–ó–∞—â–∏—Ç–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ —Å—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏, –Ω–æ –º–æ–∂–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä.",
                    history: "–ó–∞–∫–æ–Ω –°–®–ê –æ –∑–∞—Ä—É–±–µ–∂–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö (FIRRMA 2018) —É–∂–µ—Å—Ç–æ—á–∏–ª –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π."
                },
                {
                    id: "selective-sharing",
                    icon: "fa-solid fa-exchange-alt",
                    label: "–ò–∑–±–∏—Ä–∞—Ç–µ–ª—å–Ω—ã–π –æ–±–º–µ–Ω",
                    hint: "–û–±–º–µ–Ω –≤ –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö",
                    effect: {gdp: 0.5, exp: 1.0, imp: -0.3, cpi: -0.1, unemployment: -0.2, trust: 1},
                    tags: ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–∫–æ–º–ø—Ä–æ–º–∏—Å—Å"],
                    economicTheory: "–ò–∑–±–∏—Ä–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–æ–ø–µ—Ä–∞—Ü–∏—è –≤ –ù–ò–û–ö–† –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –≤–∑–∞–∏–º–Ω—É—é –≤—ã–≥–æ–¥—É –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤.",
                    history: "–ü—Ä–æ–≥—Ä–∞–º–º–∞ Horizon Europe –ø–æ–∑–≤–æ–ª—è–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ—Ç—å–∏–º —Å—Ç—Ä–∞–Ω–∞–º –≤ –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö."
                },
                {
                    id: "open-innovation",
                    icon: "fa-solid fa-globe",
                    label: "–û—Ç–∫—Ä—ã—Ç—ã–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏",
                    hint: "–ü–æ–ª–Ω—ã–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ–±–º–µ–Ω",
                    effect: {gdp: 1.5, exp: 0.8, imp: 1.2, cpi: -0.2, unemployment: -0.5, trust: 5},
                    tags: ["–æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å", "–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏"],
                    economicTheory: "–û—Ç–∫—Ä—ã—Ç—ã–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏ —É—Å–∫–æ—Ä—è—é—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ —á–µ—Ä–µ–∑ –æ–±–º–µ–Ω –∑–Ω–∞–Ω–∏—è–º–∏.",
                    history: "–ú–æ–¥–µ–ª—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏–Ω–Ω–æ–≤–∞—Ü–∏–π Tesla —Å –ø–∞—Ç–µ–Ω—Ç–∞–º–∏ —É—Å–∫–æ—Ä–∏–ª–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π."
                }
            ]
        },
        {
            id: "supply-chain-disruption",
            title: "–ù–∞—Ä—É—à–µ–Ω–∏–µ —Ü–µ–ø–æ—á–µ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫",
            text: "–ì–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å –Ω–∞—Ä—É—à–∏–ª –∫–ª—é—á–µ–≤—ã–µ —Ü–µ–ø–æ—á–∫–∏ –ø–æ—Å—Ç–∞–≤–æ–∫. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–µ—Å–ø–µ—á–∏—Ç—å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å.",
            type: "general",
            choices: [
                {
                    id: "domestic-production",
                    icon: "fa-solid fa-home",
                    label: "–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞",
                    hint: "–î–æ—Ä–æ–≥–æ, –Ω–æ –Ω–∞–¥–µ–∂–Ω–æ",
                    effect: {gdp: -2.0, exp: -1.5, imp: -3.0, cpi: 1.2, unemployment: -1.0, trust: 0},
                    tags: ["–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"],
                    economicTheory: "–†–µ—à–æ—Ä–∏–Ω–≥ –ø–æ–≤—ã—à–∞–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –Ω–æ —Å–Ω–∏–∂–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–∑-–∑–∞ –ø–æ—Ç–µ—Ä–∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤.",
                    history: "–ü–∞–Ω–¥–µ–º–∏—è COVID-19 –ø—Ä–∏–≤–µ–ª–∞ –∫ —Ä–µ—à–æ—Ä–∏–Ω–≥—É $200 –º–ª—Ä–¥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –≤ –°–®–ê –∏ –ï–° –≤ 2020-2022 –≥–æ–¥–∞—Ö."
                },
                {
                    id: "supply-diversification",
                    icon: "fa-solid fa-route",
                    label: "–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤",
                    hint: "–°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞",
                    effect: {gdp: -0.5, exp: 0.2, imp: -0.8, cpi: 0.3, unemployment: 0.1, trust: 2},
                    tags: ["–¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", "—Ä–∏—Å–∫–∏"],
                    economicTheory: "–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ü–µ–ø–æ—á–µ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫ —Å–Ω–∏–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–∏—Å–∫–∏, –Ω–æ –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–µ –∏–∑–¥–µ—Ä–∂–∫–∏.",
                    history: "–ü–æ—Å–ª–µ –∫—Ä–∏–∑–∏—Å–∞ —Å –°—É—ç—Ü–∫–∏–º –∫–∞–Ω–∞–ª–æ–º –∫–æ–º–ø–∞–Ω–∏–∏ —É–≤–µ–ª–∏—á–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ 40%."
                },
                {
                    id: "strategic-reserves",
                    icon: "fa-solid fa-warehouse",
                    label: "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑–µ—Ä–≤—ã",
                    hint: "–°–æ–∑–¥–∞—Ç—å –±—É—Ñ–µ—Ä–Ω—ã–µ –∑–∞–ø–∞—Å—ã",
                    effect: {gdp: -1.0, exp: -0.3, imp: -0.5, cpi: 0.5, unemployment: -0.2, trust: 1},
                    tags: ["—Ä–µ–∑–µ—Ä–≤—ã", "—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å"],
                    economicTheory: "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑–µ—Ä–≤—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞–≤–æ–∫ –≤ –∫—Ä–∏–∑–∏—Å–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã.",
                    history: "–ö–∏—Ç–∞–π —Å–æ–∑–¥–∞–ª –∫—Ä—É–ø–Ω–µ–π—à–∏–µ –≤ –º–∏—Ä–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑–µ—Ä–≤—ã –º–µ–¥–∏, –∞–ª—é–º–∏–Ω–∏—è –∏ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–∞–ª–ª–æ–≤."
                }
            ]
        },
        {
            id: "digital-tax",
            title: "–¶–∏—Ñ—Ä–æ–≤–æ–µ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏–µ",
            text: "–ö—Ä—É–ø–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑–±–µ–≥–∞—é—Ç –Ω–∞–ª–æ–≥–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –æ—Ñ—à–æ—Ä–Ω—ã–µ —Å—Ö–µ–º—ã. –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Ç—Ä–µ–±—É–µ—Ç —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏.",
            type: "general",
            choices: [
                {
                    id: "unilateral-digital-tax",
                    icon: "fa-solid fa-laptop",
                    label: "–û–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –Ω–∞–ª–æ–≥",
                    hint: "3% —Å –æ–±–æ—Ä–æ—Ç–∞ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —É—Å–ª—É–≥",
                    effect: {gdp: 0.8, exp: -0.5, imp: 0.2, cpi: 0.1, unemployment: 0.0, trust: -4},
                    tags: ["–Ω–∞–ª–æ–≥–∏", "—Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—è"],
                    economicTheory: "–¶–∏—Ñ—Ä–æ–≤—ã–µ –Ω–∞–ª–æ–≥–∏ –º–æ–≥—É—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ª–æ–≥–æ–≤—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è, –Ω–æ —Å–æ–∑–¥–∞—é—Ç —Ä–∏—Å–∫ –¥–≤–æ–π–Ω–æ–≥–æ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è.",
                    history: "–§—Ä–∞–Ω—Ü–∏—è –≤–≤–µ–ª–∞ 3% –Ω–∞–ª–æ–≥ –Ω–∞ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —É—Å–ª—É–≥–∏ –≤ 2019 –≥–æ–¥—É, —á—Ç–æ –ø—Ä–∏–≤–µ–ª–æ –∫ —É–≥—Ä–æ–∑–∞–º —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∞–Ω–∫—Ü–∏–π –°–®–ê."
                },
                {
                    id: "oecd-framework",
                    icon: "fa-solid fa-globe",
                    label: "–ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –û–≠–°–†",
                    hint: "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–ª–æ–≥ 15% –¥–ª—è –¢–ù–ö",
                    effect: {gdp: 1.2, exp: 0.3, imp: 0.1, cpi: 0.0, unemployment: 0.0, trust: 5},
                    tags: ["–û–≠–°–†", "–∫–æ–æ–ø–µ—Ä–∞—Ü–∏—è"],
                    economicTheory: "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –Ω–∞–ª–æ–≥–æ–≤–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –≥–æ–Ω–∫—É –Ω–∞ –¥–Ω–æ –∏ –Ω–∞–ª–æ–≥–æ–≤—É—é –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—é.",
                    history: "–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –û–≠–°–† –ø–æ Pillar One –∏ Two 2021 –≥–æ–¥–∞ –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç 90% –º–∏—Ä–æ–≤–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏."
                },
                {
                    id: "innovation-incentives",
                    icon: "fa-solid fa-rocket",
                    label: "–°—Ç–∏–º—É–ª—ã –¥–ª—è –∏–Ω–Ω–æ–≤–∞—Ü–∏–π",
                    hint: "–ù–∞–ª–æ–≥–æ–≤—ã–µ –ª—å–≥–æ—Ç—ã –¥–ª—è IT-—Å–µ–∫—Ç–æ—Ä–∞",
                    effect: {gdp: 2.0, exp: 1.8, imp: 0.5, cpi: -0.1, unemployment: -0.8, trust: 0},
                    tags: ["–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏", "—Å—Ç–∏–º—É–ª—ã"],
                    economicTheory: "–ù–∞–ª–æ–≥–æ–≤—ã–µ —Å—Ç–∏–º—É–ª—ã –¥–ª—è –≤—ã—Å–æ–∫–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π –º–æ–≥—É—Ç —É—Å–∫–æ—Ä–∏—Ç—å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç.",
                    history: "–ò—Ä–ª–∞–Ω–¥–∏—è –ø—Ä–∏–≤–ª–µ–∫–ª–∞ –∫—Ä—É–ø–Ω—ã–µ IT-–∫–æ–º–ø–∞–Ω–∏–∏ –ª—å–≥–æ—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–æ–π –Ω–∞–ª–æ–≥–∞ –Ω–∞ –ø—Ä–∏–±—ã–ª—å 12.5%."
                }
            ]
        }
    ];

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    const additionalScenarios = [];
    const scenarioTemplates = [
        {
            title: "–¢–æ—Ä–≥–æ–≤—ã–µ —Å–∞–Ω–∫—Ü–∏–∏",
            text: "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∞–Ω–∫—Ü–∏–π –ø—Ä–æ—Ç–∏–≤ —Å—Ç—Ä–∞–Ω—ã-–Ω–∞—Ä—É—à–∏—Ç–µ–ª—è.",
            choices_count: 3
        },
        {
            title: "–ó–µ–ª–µ–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥",
            text: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –∑–µ–ª–µ–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–µ –∏ —É–≥–ª–µ—Ä–æ–¥–Ω–æ–º—É –Ω–∞–ª–æ–≥—É.",
            choices_count: 4
        },
        {
            title: "–ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∏",
            text: "–ú–∞—Å—Å–æ–≤–∞—è —Ç—Ä—É–¥–æ–≤–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä—ã–Ω–æ–∫ —Ç—Ä—É–¥–∞ –∏ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è.",
            choices_count: 3
        },
        {
            title: "–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
            text: "–†–∞—Å—Ç—É—â–∏–µ —Ü–µ–Ω—ã –Ω–∞ —ç–Ω–µ—Ä–≥–æ–Ω–æ—Å–∏—Ç–µ–ª–∏ —Ç—Ä–µ–±—É—é—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏.",
            choices_count: 4
        },
        {
            title: "–¢–æ—Ä–≥–æ–≤–∞—è –≤–æ–π–Ω–∞ –≤ –≤—ã—Å–æ–∫–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–æ–º —Å–µ–∫—Ç–æ—Ä–µ",
            text: "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è –≤ —Å—Ñ–µ—Ä–µ –ø–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–≤ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –æ–±–æ—Å—Ç—Ä—è–µ—Ç—Å—è.",
            choices_count: 3
        }
    ];

    for (let i = 6; i <= 70; i++) {
        const template = scenarioTemplates[(i - 6) % scenarioTemplates.length];
        const choicesCount = template.choices_count;
        const choices = [];

        for (let j = 1; j <= choicesCount; j++) {
            choices.push({
                id: `choice-${i}-${j}`,
                icon: `fa-solid fa-${['chart-up', 'shield', 'handshake', 'balance-scale'][j-1]}`,
                label: `–í–∞—Ä–∏–∞–Ω—Ç ${j}`,
                hint: `–ü–æ–¥—Ö–æ–¥ ${j} –∫ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º—ã`,
                effect: {
                    gdp: (Math.random() - 0.5) * 3,
                    exp: (Math.random() - 0.5) * 3,
                    imp: (Math.random() - 0.5) * 3,
                    cpi: (Math.random() - 0.5) * 1.5,
                    unemployment: (Math.random() - 0.5) * 2,
                    trust: (Math.random() - 0.5) * 10
                },
                tags: ["–æ–±—â–∏–π", "—ç–∫–æ–Ω–æ–º–∏–∫–∞"],
                economicTheory: "–ö–∞–∂–¥–æ–µ —Ç–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏–º–µ–µ—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –¥–ª—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω—ã.",
                history: "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ —Ä–µ—à–µ–Ω–∏—é —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–ø–æ—Ä–æ–≤."
            });
        }

        additionalScenarios.push({
            id: `general-scenario-${i}`,
            title: template.title,
            text: template.text,
            type: "general",
            choices: choices
        });
    }

    return [...GENERAL_SCENARIOS, ...additionalScenarios];
}

// –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω
const COUNTRY_SCENARIOS = {
    "US": [
        {
            id: "us-nafta-renegotiation",
            title: "–ü–µ—Ä–µ—Å–º–æ—Ç—Ä –ù–ê–§–¢–ê",
            text: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ —Å —Å–æ—Å–µ–¥—è–º–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏—Ö —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç.",
            type: "country",
            choices: [
                {
                    id: "tough-renegotiation",
                    icon: "fa-solid fa-gavel",
                    label: "–ñ–µ—Å—Ç–∫–∏–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã",
                    hint: "–¢—Ä–µ–±–æ–≤–∞—Ç—å –ª—É—á—à–∏—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è –°–®–ê",
                    effect: {gdp: 1.5, exp: -0.8, imp: -1.2, cpi: 0.3, unemployment: -0.8, trust: -3},
                    tags: ["–ù–ê–§–¢–ê", "–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã"],
                    economicTheory: "–ü–µ—Ä–µ—Å–º–æ—Ç—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–æ–≥–ª–∞—à–µ–Ω–∏–π –º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å —É—Å–ª–æ–≤–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏, –Ω–æ —Å–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å.",
                    history: "USMCA –∑–∞–º–µ–Ω–∏–ª–∞ –ù–ê–§–¢–ê –≤ 2020 –≥–æ–¥—É —Å –±–æ–ª–µ–µ –∂–µ—Å—Ç–∫–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π."
                },
                {
                    id: "maintain-nafta",
                    icon: "fa-solid fa-handshake",
                    label: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å-–∫–≤–æ",
                    hint: "–ù–µ –º–µ–Ω—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è",
                    effect: {gdp: 0.2, exp: 0.5, imp: 0.3, cpi: -0.1, unemployment: 0.1, trust: 2},
                    tags: ["—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", "—Å—Ç–∞—Ç—É—Å-–∫–≤–æ"],
                    economicTheory: "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –±–∏–∑–Ω–µ—Å–∞.",
                    history: "–ù–ê–§–¢–ê –¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∞ 25 –ª–µ—Ç –∏ —Å–æ–∑–¥–∞–ª–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–µ–≤–µ—Ä–æ–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫—É—é —ç–∫–æ–Ω–æ–º–∏–∫—É."
                },
                {
                    id: "modernize-nafta",
                    icon: "fa-solid fa-sync",
                    label: "–ú–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è",
                    hint: "–î–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ñ—Ä–æ–≤—É—é —Ç–æ—Ä–≥–æ–≤–ª—é –∏ —ç–∫–æ–ª–æ–≥–∏—é",
                    effect: {gdp: 1.0, exp: 1.2, imp: 0.8, cpi: 0.1, unemployment: -0.3, trust: 4},
                    tags: ["–º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è", "–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏"],
                    economicTheory: "–ú–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–æ–≥–ª–∞—à–µ–Ω–∏–π –ø–æ–¥ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–µ–∞–ª–∏–∏ –ø–æ–≤—ã—à–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.",
                    history: "USMCA –≤–∫–ª—é—á–∏–ª–∞ –Ω–æ–≤—ã–µ –≥–ª–∞–≤—ã –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ –∏ —Ç—Ä—É–¥–æ–≤—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º."
                }
            ]
        }
    ],
    "CN": [
        {
            id: "cn-belt-road",
            title: "–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ –ü–æ—è—Å–∞ –∏ –ü—É—Ç–∏",
            text: "–ú–∞—Å—à—Ç–∞–±–Ω—ã–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –º–æ–∂–µ—Ç —É–∫—Ä–µ–ø–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–≤—è–∑–∏, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.",
            type: "country",
            choices: [
                {
                    id: "expand-bri",
                    icon: "fa-solid fa-road",
                    label: "–†–∞—Å—à–∏—Ä–∏—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É",
                    hint: "–£–≤–µ–ª–∏—á–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É",
                    effect: {gdp: -2.0, exp: 3.5, imp: 1.0, cpi: 0.5, unemployment: -1.2, trust: 8},
                    tags: ["–ü–∏–ü", "–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞"],
                    economicTheory: "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–∑–¥–∞—é—Ç —Å–µ—Ç–µ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ä–æ—Å—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏.",
                    history: "–ö–∏—Ç–∞–π –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª $1 —Ç—Ä–ª–Ω –≤ –ø—Ä–æ–µ–∫—Ç—ã –ü–∏–ü –≤ 140+ —Å—Ç—Ä–∞–Ω–∞—Ö —Å 2013 –≥–æ–¥–∞."
                },
                {
                    id: "focus-domestic",
                    icon: "fa-solid fa-home",
                    label: "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º —Ä—ã–Ω–∫–µ",
                    hint: "–†–∞–∑–≤–∏–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ",
                    effect: {gdp: 1.5, exp: -0.5, imp: 2.0, cpi: 0.3, unemployment: -0.8, trust: -2},
                    tags: ["–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä—ã–Ω–æ–∫", "–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ"],
                    economicTheory: "–ü–µ—Ä–µ—Ö–æ–¥ –æ—Ç —ç–∫—Å–ø–æ—Ä—Ç–Ω–æ–π –∫ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–æ–π –º–æ–¥–µ–ª–∏ —Ä–æ—Å—Ç–∞ –ø–æ–≤—ã—à–∞–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å —ç–∫–æ–Ω–æ–º–∏–∫–∏.",
                    history: "–ö–∏—Ç–∞–π –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç –ø–æ–ª–∏—Ç–∏–∫—É '–¥–≤–æ–π–Ω–æ–π —Ü–∏—Ä–∫—É–ª—è—Ü–∏–∏' —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä—ã–Ω–æ–∫."
                },
                {
                    id: "green-bri",
                    icon: "fa-solid fa-leaf",
                    label: "–ó–µ–ª–µ–Ω—ã–π –ø–æ—è—Å –∏ –ø—É—Ç—å",
                    hint: "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ —á–∏—Å—Ç—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É",
                    effect: {gdp: -1.0, exp: 2.0, imp: 0.5, cpi: 0.2, unemployment: -0.5, trust: 6},
                    tags: ["—ç–∫–æ–ª–æ–≥–∏—è", "—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å"],
                    economicTheory: "–ó–µ–ª–µ–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞.",
                    history: "–ö–∏—Ç–∞–π –æ–±—ä—è–≤–∏–ª –æ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è —É–≥–æ–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö –ü–∏–ü –≤ 2021 –≥–æ–¥—É."
                }
            ]
        }
    ],
    // –î–æ–±–∞–≤–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω...
};

// –°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
const RANDOM_EVENTS = [
    {
        id: "oil-spike",
        title: "–°–∫–∞—á–æ–∫ —Ü–µ–Ω –Ω–∞ –Ω–µ—Ñ—Ç—å",
        description: "–ì–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏–≤–µ–ª–∞ –∫ —Ä–æ—Å—Ç—É —Ü–µ–Ω –Ω–∞ –Ω–µ—Ñ—Ç—å –Ω–∞ 40%",
        effect: {gdp: -0.5, exp: -0.3, imp: -0.8, cpi: 1.2, unemployment: 0.3, trust: 0},
        icon: "fa-solid fa-fire-flame-curved",
        type: "negative"
    },
    {
        id: "tech-breakthrough",
        title: "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ä—ã–≤",
        description: "–í–∞—à–∏ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–æ–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ—Ä—ã–≤ –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞",
        effect: {gdp: 1.8, exp: 2.2, imp: 0.5, cpi: -0.2, unemployment: -0.5, trust: 3},
        icon: "fa-solid fa-lightbulb",
        type: "positive"
    },
    {
        id: "natural-disaster",
        title: "–°—Ç–∏—Ö–∏–π–Ω–æ–µ –±–µ–¥—Å—Ç–≤–∏–µ",
        description: "–£—Ä–∞–≥–∞–Ω –Ω–∞—Ä—É—à–∏–ª —Ä–∞–±–æ—Ç—É –∫–ª—é—á–µ–≤—ã—Ö –ø–æ—Ä—Ç–æ–≤ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–æ—â–Ω–æ—Å—Ç–µ–π",
        effect: {gdp: -1.2, exp: -1.8, imp: -0.5, cpi: 0.8, unemployment: 0.6, trust: 0},
        icon: "fa-solid fa-hurricane",
        type: "negative"
    },
    {
        id: "new-trade-partner",
        title: "–ù–æ–≤—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä",
        description: "–ó–∞–∫–ª—é—á–µ–Ω–æ –≤—ã–≥–æ–¥–Ω–æ–µ —Ç–æ—Ä–≥–æ–≤–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ —Å –±—ã—Å—Ç—Ä–æ —Ä–∞—Å—Ç—É—â–µ–π —ç–∫–æ–Ω–æ–º–∏–∫–æ–π",
        effect: {gdp: 1.0, exp: 1.5, imp: 0.8, cpi: -0.1, unemployment: -0.3, trust: 2},
        icon: "fa-solid fa-handshake",
        type: "positive"
    },
    {
        id: "cyber-attack",
        title: "–ö–∏–±–µ—Ä–∞—Ç–∞–∫–∞",
        description: "–ú–∞—Å—à—Ç–∞–±–Ω–∞—è –∫–∏–±–µ—Ä–∞—Ç–∞–∫–∞ –Ω–∞—Ä—É—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã",
        effect: {gdp: -0.8, exp: -0.5, imp: -0.3, cpi: 0.3, unemployment: 0.2, trust: -1},
        icon: "fa-solid fa-virus",
        type: "negative"
    },
    {
        id: "currency-surge",
        title: "–£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã",
        description: "–ü—Ä–∏—Ç–æ–∫ –∫–∞–ø–∏—Ç–∞–ª–∞ –ø—Ä–∏–≤–µ–ª –∫ —É–∫—Ä–µ–ø–ª–µ–Ω–∏—é –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç—ã –Ω–∞ 15%",
        effect: {gdp: 0.5, exp: -1.0, imp: 1.2, cpi: -0.4, unemployment: 0.2, trust: 1},
        icon: "fa-solid fa-chart-line",
        type: "mixed"
    }
];

// –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
class GameState {
    constructor() {
        this.selectedCountry = null;
        this.selectedMode = null;
        this.currentTurn = 1;
        this.totalTurns = 12;
        this.totalYears = 3;
        this.indicators = {
            gdpIdx: 100.0,
            expIdx: 100.0,
            impIdx: 100.0,
            cpi: 2.0,
            unemployment: 5.0
        };
        this.trust = 50;
        this.history = [];
        this.currentScenario = null;
        this.availableScenarios = [];
        this.gameLog = [];
        this.isGameActive = false;
        this.charts = {
            performance: null,
            gdp: null,
            export: null,
            import: null,
            inflation: null,
            unemployment: null
        };
        this.chartData = {
            gdp: [100, 100],      // –ù–∞—á–∏–Ω–∞–µ–º —Å 2 —Ç–æ—á–µ–∫
            export: [100, 100],
            import: [100, 100],
            inflation: [2.0, 2.0],
            unemployment: [5.0, 5.0]
        };
    }

    initializeScenarios() {
        try {
            const generalScenarios = generateScenarios();
            this.availableScenarios = [...generalScenarios];

            if (this.selectedCountry && COUNTRY_SCENARIOS[this.selectedCountry]) {
                this.availableScenarios.push(...COUNTRY_SCENARIOS[this.selectedCountry]);
            }

            console.log(`Initialized ${this.availableScenarios.length} scenarios`);
        } catch (error) {
            console.error('Error initializing scenarios:', error);
            this.availableScenarios = this.createFallbackScenarios();
        }
    }

    createFallbackScenarios() {
        return [{
            id: "fallback-scenario",
            title: "–¢–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
            text: "–ü—Ä–∏–Ω–∏–º–∏—Ç–µ –≤–∞–∂–Ω–æ–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ.",
            type: "general",
            choices: [
                {
                    id: "choice-1",
                    icon: "fa-solid fa-chart-up",
                    label: "–õ–∏–±–µ—Ä–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥",
                    hint: "–û—Ç–∫—Ä—ã—Ç—å —Ä—ã–Ω–∫–∏",
                    effect: {gdp: 1.0, exp: 1.5, imp: 0.5, cpi: -0.1, unemployment: -0.2, trust: 2},
                    tags: ["–ª–∏–±–µ—Ä–∞–ª–∏–∑–∞—Ü–∏—è"],
                    economicTheory: "–õ–∏–±–µ—Ä–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–º—É —Ä–æ—Å—Ç—É.",
                    history: "–ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω –ø–æ–ª—É—á–∏–ª–∏ –≤—ã–≥–æ–¥—ã –æ—Ç –ª–∏–±–µ—Ä–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏."
                },
                {
                    id: "choice-2",
                    icon: "fa-solid fa-shield",
                    label: "–ü—Ä–æ—Ç–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥",
                    hint: "–ó–∞—â–∏—Ç–∏—Ç—å –º–µ—Å—Ç–Ω—É—é –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å",
                    effect: {gdp: -0.5, exp: -1.0, imp: -1.5, cpi: 0.3, unemployment: -0.5, trust: -2},
                    tags: ["–ø—Ä–æ—Ç–µ–∫—Ü–∏–æ–Ω–∏–∑–º"],
                    economicTheory: "–ü—Ä–æ—Ç–µ–∫—Ü–∏–æ–Ω–∏–∑–º –∑–∞—â–∏—â–∞–µ—Ç –º–µ—Å—Ç–Ω—É—é –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å.",
                    history: "–ú–Ω–æ–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ—Ç–µ–∫—Ü–∏–æ–Ω–∏–∑–º –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è."
                },
                {
                    id: "choice-3",
                    icon: "fa-solid fa-balance-scale",
                    label: "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥",
                    hint: "–ö–æ–º–ø—Ä–æ–º–∏—Å—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
                    effect: {gdp: 0.2, exp: 0.3, imp: 0.1, cpi: 0.1, unemployment: -0.1, trust: 1},
                    tags: ["–±–∞–ª–∞–Ω—Å"],
                    economicTheory: "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ä–∏—Å–∫–∏.",
                    history: "–ú–Ω–æ–≥–∏–µ —É—Å–ø–µ—à–Ω—ã–µ —ç–∫–æ–Ω–æ–º–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å–º–µ—à–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥."
                }
            ]
        }];
    }

    getCurrentScenario() {
        try {
            if (!this.availableScenarios || this.availableScenarios.length === 0) {
                throw new Error('No scenarios available');
            }

            if (GAME_MODES[this.selectedMode].static) {
                const index = Math.min(this.currentTurn - 1, this.availableScenarios.length - 1);
                return this.availableScenarios[index];
            } else {
                const randomIndex = Math.floor(Math.random() * this.availableScenarios.length);
                return this.availableScenarios[randomIndex];
            }
        } catch (error) {
            console.error('Error getting current scenario:', error);
            return this.createFallbackScenarios()[0];
        }
    }

    applyChoice(choice) {
        try {
            const mode = GAME_MODES[this.selectedMode];
            const multiplier = mode.multiplier;
            const countryMods = COUNTRIES[this.selectedCountry].base_modifiers;

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –≤—ã–±–æ—Ä–∞
            Object.entries(choice.effect).forEach(([key, value]) => {
                if (typeof value === 'number') {
                    switch(key) {
                        case 'gdp':
                            this.indicators.gdpIdx += (value * multiplier) + (countryMods.gdpIdx * 0.1);
                            break;
                        case 'exp':
                            this.indicators.expIdx += (value * multiplier) + (countryMods.expIdx * 0.1);
                            break;
                        case 'imp':
                            this.indicators.impIdx += (value * multiplier) + (countryMods.impIdx * 0.1);
                            break;
                        case 'cpi':
                            this.indicators.cpi += (value * multiplier) + (countryMods.cpi * 0.1);
                            break;
                        case 'unemployment':
                            this.indicators.unemployment += (value * multiplier) + (countryMods.unemployment * 0.1);
                            break;
                        case 'trust':
                            this.trust += value * multiplier;
                            break;
                    }
                }
            });

            // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            this.indicators.gdpIdx = Math.max(60, Math.min(140, this.indicators.gdpIdx));
            this.indicators.expIdx = Math.max(50, Math.min(150, this.indicators.expIdx));
            this.indicators.impIdx = Math.max(50, Math.min(150, this.indicators.impIdx));
            this.indicators.cpi = Math.max(-1, Math.min(8, this.indicators.cpi));
            this.indicators.unemployment = Math.max(2, Math.min(15, this.indicators.unemployment));
            this.trust = Math.max(0, Math.min(100, this.trust));

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
            this.chartData.gdp.push(this.indicators.gdpIdx);
            this.chartData.export.push(this.indicators.expIdx);
            this.chartData.import.push(this.indicators.impIdx);
            this.chartData.inflation.push(this.indicators.cpi);
            this.chartData.unemployment.push(this.indicators.unemployment);

            // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ
            this.gameLog.push({
                turn: this.currentTurn,
                year: Math.ceil(this.currentTurn / (this.totalTurns / this.totalYears)),
                scenario: this.currentScenario.title,
                choice: choice.label,
                effects: choice.effect,
                theory: choice.economicTheory || "–ù–µ—Ç —Ç–µ–æ—Ä–∏–∏",
                history: choice.history || "–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞",
                indicators: {...this.indicators},
                trust: this.trust
            });

            console.log('Choice applied successfully');
        } catch (error) {
            console.error('Error applying choice:', error);
        }
    }

    applyRandomEvent(event) {
        try {
            const mode = GAME_MODES[this.selectedMode];
            const multiplier = mode.multiplier * 0.7;

            Object.entries(event.effect).forEach(([key, value]) => {
                if (typeof value === 'number') {
                    switch(key) {
                        case 'gdp':
                            this.indicators.gdpIdx += value * multiplier;
                            break;
                        case 'exp':
                            this.indicators.expIdx += value * multiplier;
                            break;
                        case 'imp':
                            this.indicators.impIdx += value * multiplier;
                            break;
                        case 'cpi':
                            this.indicators.cpi += value * multiplier;
                            break;
                        case 'unemployment':
                            this.indicators.unemployment += value * multiplier;
                            break;
                        case 'trust':
                            this.trust += value * multiplier;
                            break;
                    }
                }
            });

            // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            this.indicators.gdpIdx = Math.max(60, Math.min(140, this.indicators.gdpIdx));
            this.indicators.expIdx = Math.max(50, Math.min(150, this.indicators.expIdx));
            this.indicators.impIdx = Math.max(50, Math.min(150, this.indicators.impIdx));
            this.indicators.cpi = Math.max(-1, Math.min(8, this.indicators.cpi));
            this.indicators.unemployment = Math.max(2, Math.min(15, this.indicators.unemployment));
            this.trust = Math.max(0, Math.min(100, this.trust));
        } catch (error) {
            console.error('Error applying random event:', error);
        }
    }

    calculateDetailedScore() {
        try {
            const countryBonus = COUNTRIES[this.selectedCountry].bonus;
            
            // –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏ (0-60)
            let baseScore = 0;
            baseScore += Math.max(0, Math.min(20, (this.indicators.gdpIdx - 80) * 0.5)); // –í–í–ü (20 points max)
            baseScore += Math.max(0, Math.min(15, (this.indicators.expIdx - 80) * 0.375)); // –≠–∫—Å–ø–æ—Ä—Ç (15 points max)
            baseScore += Math.max(0, Math.min(10, (120 - this.indicators.impIdx) * 0.25)); // –ò–º–ø–æ—Ä—Ç (10 points max)
            baseScore += Math.max(0, Math.min(8, (4 - this.indicators.cpi) * 2)); // –ò–Ω—Ñ–ª—è—Ü–∏—è (8 points max)
            baseScore += Math.max(0, Math.min(7, (8 - this.indicators.unemployment) * 1.17)); // –ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞ (7 points max)

            // –ë–æ–Ω—É—Å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏–π (0-20)
            const avgTrustChange = this.gameLog.reduce((sum, log) => {
                return sum + (log.effects.trust || 0);
            }, 0) / this.gameLog.length;
            const decisionsBonus = Math.max(0, Math.min(20, 10 + avgTrustChange));

            // –ë–æ–Ω—É—Å –∑–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (0-5)
            const consistencyBonus = this.calculateConsistencyBonus();

            const totalScore = Math.round(baseScore + countryBonus + decisionsBonus + consistencyBonus);

            return {
                total: Math.max(0, Math.min(100, totalScore)),
                base: Math.round(baseScore),
                country: countryBonus,
                decisions: Math.round(decisionsBonus),
                consistency: Math.round(consistencyBonus)
            };
        } catch (error) {
            console.error('Error calculating detailed score:', error);
            return {total: 50, base: 30, country: 10, decisions: 10, consistency: 0};
        }
    }

    calculateConsistencyBonus() {
        if (this.gameLog.length < 3) return 0;
        
        let consistentChoices = 0;
        let previousTags = [];
        
        this.gameLog.forEach(log => {
            if (previousTags.length > 0) {
                const currentTags = log.choice.tags || [];
                const hasCommonTag = currentTags.some(tag => previousTags.includes(tag));
                if (hasCommonTag) consistentChoices++;
            }
            previousTags = log.choice.tags || [];
        });
        
        return Math.min(5, (consistentChoices / this.gameLog.length) * 5);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏–≥—Ä—ã
let game = new GameState();

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–æ–π
function initializeTheme() {
    try {
        const savedTheme = localStorage.getItem('tradeWarsTheme') || 'light';
        document.documentElement.setAttribute('data-color-scheme', savedTheme);
        updateThemeIcon(savedTheme);
    } catch (error) {
        console.error('Error initializing theme:', error);
        document.documentElement.setAttribute('data-color-scheme', 'light');
    }
}

function toggleTheme() {
    try {
        const current = document.documentElement.getAttribute('data-color-scheme');
        const newTheme = current === 'dark' ? 'light' : 'dark';
        document.documentElement.setAttribute('data-color-scheme', newTheme);
        localStorage.setItem('tradeWarsTheme', newTheme);
        updateThemeIcon(newTheme);
    } catch (error) {
        console.error('Error toggling theme:', error);
    }
}

function updateThemeIcon(theme) {
    try {
        const icon = document.querySelector('#theme-toggle i');
        if (icon) {
            // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—É–º–µ—Å—è—Ü
            icon.className = 'fas fa-moon';
        }
    } catch (error) {
        console.error('Error updating theme icon:', error);
    }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞–º–∏
function showScreen(screenId) {
    try {
        document.querySelectorAll('.screen').forEach(screen => {
            screen.classList.remove('active');
        });
        const targetScreen = document.getElementById(screenId);
        if (targetScreen) {
            targetScreen.classList.add('active');
            console.log(`Switched to screen: ${screenId}`);
        } else {
            console.error(`Screen not found: ${screenId}`);
        }
    } catch (error) {
        console.error('Error showing screen:', error);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω
function initializeCountries() {
    try {
        const grid = document.getElementById('countries-grid');
        if (!grid) {
            console.error('Countries grid not found');
            return;
        }

        Object.entries(COUNTRIES).forEach(([code, country]) => {
            const card = document.createElement('div');
            card.className = 'country-card';
            card.dataset.country = code;
            card.innerHTML = `
                <div class="country-flag">${country.flag}</div>
                <div class="country-name">${country.name}</div>
                <div class="country-difficulty">${country.difficulty}</div>
                <div class="country-bonus">+${country.bonus} –±–∞–ª–ª–æ–≤</div>
                <div class="country-specialties">
                    ${country.specialties.map(s => `<span class="specialty-tag">${s}</span>`).join('')}
                </div>
            `;
            card.addEventListener('click', () => selectCountry(code));
            grid.appendChild(card);
        });
    } catch (error) {
        console.error('Error initializing countries:', error);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–æ–≤
function initializeModes() {
    try {
        const modeButtons = document.querySelectorAll('.mode-btn');
        modeButtons.forEach(btn => {
            btn.addEventListener('click', () => selectMode(btn.dataset.mode));
        });
    } catch (error) {
        console.error('Error initializing modes:', error);
    }
}

// –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã
function selectCountry(countryCode) {
    try {
        document.querySelectorAll('.country-card').forEach(card => {
            card.classList.remove('selected');
        });
        document.querySelector(`[data-country="${countryCode}"]`).classList.add('selected');
        game.selectedCountry = countryCode;
        updateStartButton();
        console.log('Selected country:', countryCode);
    } catch (error) {
        console.error('Error selecting country:', error);
    }
}

// –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
function selectMode(mode) {
    try {
        document.querySelectorAll('.mode-btn').forEach(btn => {
            btn.classList.remove('selected');
        });
        document.querySelector(`[data-mode="${mode}"]`).classList.add('selected');
        game.selectedMode = mode;
        game.totalTurns = GAME_MODES[mode].turns;
        game.totalYears = GAME_MODES[mode].years;
        updateStartButton();
        console.log('Selected mode:', mode);
    } catch (error) {
        console.error('Error selecting mode:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç–∞
function updateStartButton() {
    try {
        const startBtn = document.getElementById('start-game');
        if (startBtn) {
            startBtn.disabled = !(game.selectedCountry && game.selectedMode);
        }
    } catch (error) {
        console.error('Error updating start button:', error);
    }
}

// –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
function startGame() {
    try {
        if (!game.selectedCountry || !game.selectedMode) {
            alert('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏ —Ä–µ–∂–∏–º –∏–≥—Ä—ã');
            return;
        }

        game.initializeScenarios();
        game.isGameActive = true;
        game.currentTurn = 1;
        
        showScreen('game-screen');
        updateGameUI();
        loadNextScenario();
        createIndividualCharts();
        
        console.log('Game started');
    } catch (error) {
        console.error('Error starting game:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–≥—Ä—ã
function updateGameUI() {
    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–µ
        const countryFlag = document.getElementById('selected-country-flag');
        const countryName = document.getElementById('selected-country-name');
        if (countryFlag && countryName) {
            countryFlag.textContent = COUNTRIES[game.selectedCountry].flag;
            countryName.textContent = COUNTRIES[game.selectedCountry].name;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–æ–¥–µ
        const currentTurn = document.getElementById('current-turn');
        const totalTurns = document.getElementById('total-turns');
        const currentYear = document.getElementById('current-year');
        const totalYears = document.getElementById('total-years');
        const progressFill = document.getElementById('progress-fill');

        if (currentTurn) currentTurn.textContent = game.currentTurn;
        if (totalTurns) totalTurns.textContent = game.totalTurns;
        if (currentYear) currentYear.textContent = `–ì–æ–¥ ${Math.ceil(game.currentTurn / (game.totalTurns / game.totalYears))}`;
        if (totalYears) totalYears.textContent = `${game.totalYears} –ª–µ—Ç`;
        if (progressFill) {
            const progress = (game.currentTurn - 1) / game.totalTurns * 100;
            progressFill.style.width = `${progress}%`;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–≤–µ—Ä–∏–µ
        const trustValue = document.getElementById('trust-value');
        if (trustValue) trustValue.textContent = Math.round(game.trust);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        updateIndicatorsPanel();
        updateIndividualCharts();

        console.log('Game UI updated');
    } catch (error) {
        console.error('Error updating game UI:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
function updateIndicatorsPanel() {
    try {
        const panel = document.getElementById('indicators-panel');
        if (!panel) return;

        const indicators = [
            {key: 'gdpIdx', label: '–í–í–ü –∏–Ω–¥–µ–∫—Å', icon: 'fa-chart-line', value: game.indicators.gdpIdx.toFixed(1)},
            {key: 'expIdx', label: '–≠–∫—Å–ø–æ—Ä—Ç', icon: 'fa-shipping-fast', value: game.indicators.expIdx.toFixed(1)},
            {key: 'impIdx', label: '–ò–º–ø–æ—Ä—Ç', icon: 'fa-download', value: game.indicators.impIdx.toFixed(1)},
            {key: 'cpi', label: '–ò–Ω—Ñ–ª—è—Ü–∏—è', icon: 'fa-percentage', value: game.indicators.cpi.toFixed(1) + '%'},
            {key: 'unemployment', label: '–ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞', icon: 'fa-user-times', value: game.indicators.unemployment.toFixed(1) + '%'}
        ];

        panel.innerHTML = indicators.map(indicator => {
            const trendClass = getTrendClass(indicator.key);
            return `
                <div class="indicator ${trendClass}">
                    <i class="fas ${indicator.icon}"></i>
                    <div class="indicator-info">
                        <div class="indicator-label">${indicator.label}</div>
                        <div class="indicator-value">${indicator.value}</div>
                    </div>
                </div>
            `;
        }).join('');
    } catch (error) {
        console.error('Error updating indicators panel:', error);
    }
}

function getTrendClass(key) {
    if (game.chartData[key === 'gdpIdx' ? 'gdp' : key === 'expIdx' ? 'export' : key === 'impIdx' ? 'import' : key === 'cpi' ? 'inflation' : 'unemployment'].length < 2) {
        return '';
    }
    
    const data = game.chartData[key === 'gdpIdx' ? 'gdp' : key === 'expIdx' ? 'export' : key === 'impIdx' ? 'import' : key === 'cpi' ? 'inflation' : 'unemployment'];
    const current = data[data.length - 1];
    const previous = data[data.length - 2];
    
    if (key === 'cpi' || key === 'unemployment' || key === 'impIdx') {
        // –î–ª—è –∏–Ω—Ñ–ª—è—Ü–∏–∏, –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã –∏ –∏–º–ø–æ—Ä—Ç–∞ - –º–µ–Ω—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª—É—á—à–µ
        return current < previous ? 'positive' : current > previous ? 'negative' : '';
    } else {
        // –î–ª—è –í–í–ü –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ - –±–æ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª—É—á—à–µ
        return current > previous ? 'positive' : current < previous ? 'negative' : '';
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
function createIndividualCharts() {
    try {
        const charts = [
            {id: 'gdp-chart', data: 'gdp', label: '–í–í–ü –∏–Ω–¥–µ–∫—Å', color: '#1FB8CD'},
            {id: 'export-chart', data: 'export', label: '–≠–∫—Å–ø–æ—Ä—Ç', color: '#FFC185'},
            {id: 'import-chart', data: 'import', label: '–ò–º–ø–æ—Ä—Ç', color: '#B4413C'},
            {id: 'inflation-chart', data: 'inflation', label: '–ò–Ω—Ñ–ª—è—Ü–∏—è (%)', color: '#FF6B6B'},
            {id: 'unemployment-chart', data: 'unemployment', label: '–ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞ (%)', color: '#4ECDC4'}
        ];

        charts.forEach(chart => {
            const canvas = document.getElementById(chart.id);
            if (canvas) {
                const ctx = canvas.getContext('2d');
                
                if (game.charts[chart.data]) {
                    game.charts[chart.data].destroy();
                }

                const labels = Array.from({length: game.chartData[chart.data].length}, (_, i) => `–•–æ–¥ ${i}`);
                
                game.charts[chart.data] = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: chart.label,
                            data: game.chartData[chart.data],
                            borderColor: chart.color,
                            backgroundColor: chart.color + '20',
                            tension: 0.3,
                            fill: true
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: false
                            }
                        },
                        plugins: {
                            legend: {
                                display: false
                            },
                            title: {
                                display: true,
                                text: chart.label
                            }
                        }
                    }
                });
            }
        });

        console.log('Individual charts created');
    } catch (error) {
        console.error('Error creating individual charts:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
function updateIndividualCharts() {
    try {
        const dataKeys = ['gdp', 'export', 'import', 'inflation', 'unemployment'];
        
        dataKeys.forEach(key => {
            if (game.charts[key]) {
                const labels = Array.from({length: game.chartData[key].length}, (_, i) => `–•–æ–¥ ${i}`);
                game.charts[key].data.labels = labels;
                game.charts[key].data.datasets[0].data = game.chartData[key];
                game.charts[key].update();
            }
        });
    } catch (error) {
        console.error('Error updating individual charts:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
function loadNextScenario() {
    try {
        game.currentScenario = game.getCurrentScenario();
        
        const titleElement = document.getElementById('scenario-title');
        const descElement = document.getElementById('scenario-description');
        const choicesGrid = document.getElementById('choices-grid');

        if (titleElement) titleElement.textContent = game.currentScenario.title;
        if (descElement) descElement.textContent = game.currentScenario.text;

        if (choicesGrid && game.currentScenario.choices) {
            choicesGrid.innerHTML = '';
            game.currentScenario.choices.forEach(choice => {
                const card = document.createElement('div');
                card.className = 'choice-card';
                card.innerHTML = `
                    <div class="choice-header">
                        <i class="${choice.icon}"></i>
                        <h4>${choice.label}</h4>
                    </div>
                    <p class="choice-hint">${choice.hint}</p>
                `;
                card.addEventListener('click', () => makeChoice(choice));
                choicesGrid.appendChild(card);
            });
        }

        // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        const effectsPanel = document.getElementById('choice-effects');
        if (effectsPanel) {
            effectsPanel.classList.add('hidden');
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
        if (Math.random() < 0.3) {
            setTimeout(() => showRandomEvent(), 1000);
        }

        console.log('Scenario loaded successfully');
    } catch (error) {
        console.error('Error loading next scenario:', error);
    }
}

// –ü–æ–∫–∞–∑ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
function showRandomEvent() {
    try {
        const event = RANDOM_EVENTS[Math.floor(Math.random() * RANDOM_EVENTS.length)];
        const iconElement = document.getElementById('event-icon');
        const titleElement = document.getElementById('event-title');
        const descElement = document.getElementById('event-description');

        if (iconElement) iconElement.className = event.icon;
        if (titleElement) titleElement.textContent = event.title;
        if (descElement) descElement.textContent = event.description;

        const eventPanel = document.getElementById('random-event');
        if (eventPanel) {
            eventPanel.classList.remove('hidden');

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–æ–±—ã—Ç–∏—è
            game.applyRandomEvent(event);
            updateGameUI();

            // –°–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                eventPanel.classList.add('hidden');
            }, 3000);
        }

        console.log('Random event shown:', event.title);
    } catch (error) {
        console.error('Error showing random event:', error);
    }
}

// –í—ã–±–æ—Ä —Ä–µ—à–µ–Ω–∏—è
function makeChoice(choice) {
    try {
        console.log('Making choice:', choice.label);
        game.applyChoice(choice);
        updateGameUI();
        showChoiceEffects(choice);
    } catch (error) {
        console.error('Error making choice:', error);
    }
}

// –ü–æ–∫–∞–∑ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –≤—ã–±–æ—Ä–∞
function showChoiceEffects(choice) {
    try {
        const mode = GAME_MODES[game.selectedMode];
        if (mode.effectsVisible) {
            const effectsGrid = document.getElementById('effects-grid');
            if (effectsGrid) {
                effectsGrid.innerHTML = '';

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —Å —Ü–≤–µ—Ç–Ω—ã–º–∏ –ø–ª–∞—à–∫–∞–º–∏
                Object.entries(choice.effect).forEach(([key, value]) => {
                    if (key === 'trust' || typeof value !== 'number') return;

                    const effectItem = document.createElement('div');
                    effectItem.className = `effect-item ${value > 0 ? 'positive' : 'negative'}`;
                    
                    let label = '';
                    let displayValue = value > 0 ? `+${value.toFixed(1)}` : value.toFixed(1);
                    let bgColor = '';

                    switch(key) {
                        case 'gdp':
                            label = '–í–í–ü';
                            bgColor = 'rgba(31, 184, 205, 0.1)';
                            break;
                        case 'exp':
                            label = '–≠–∫—Å–ø–æ—Ä—Ç';
                            bgColor = 'rgba(255, 193, 133, 0.1)';
                            break;
                        case 'imp':
                            label = '–ò–º–ø–æ—Ä—Ç';
                            bgColor = 'rgba(180, 65, 60, 0.1)';
                            break;
                        case 'cpi':
                            label = '–ò–Ω—Ñ–ª—è—Ü–∏—è';
                            displayValue += '%';
                            bgColor = 'rgba(255, 107, 107, 0.1)';
                            break;
                        case 'unemployment':
                            label = '–ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞';
                            displayValue += '%';
                            bgColor = 'rgba(78, 205, 196, 0.1)';
                            break;
                    }

                    effectItem.style.backgroundColor = bgColor;
                    effectItem.innerHTML = `
                        <div class="effect-label">${label}</div>
                        <div class="effect-value">${displayValue}</div>
                    `;
                    effectsGrid.appendChild(effectItem);
                });
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–æ—Ä–∏—é –∏ –∏—Å—Ç–æ—Ä–∏—é
            const theoryElement = document.getElementById('economic-theory-text');
            const historyElement = document.getElementById('history-text');
            if (theoryElement) theoryElement.textContent = choice.economicTheory || "–¢–µ–æ—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞";
            if (historyElement) historyElement.textContent = choice.history || "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
        }

        const effectsPanel = document.getElementById('choice-effects');
        if (effectsPanel) {
            effectsPanel.classList.remove('hidden');
        }

        console.log('Choice effects shown');
    } catch (error) {
        console.error('Error showing choice effects:', error);
    }
}

// –°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥
function nextTurn() {
    try {
        console.log('Advancing to next turn...');
        game.currentTurn++;
        
        if (game.currentTurn > game.totalTurns) {
            endGame();
        } else {
            updateGameUI();
            loadNextScenario();
        }
    } catch (error) {
        console.error('Error advancing turn:', error);
    }
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
function endGame() {
    try {
        console.log('Ending game...');
        game.isGameActive = false;
        showScreen('results-screen');
        showResults();
    } catch (error) {
        console.error('Error ending game:', error);
    }
}

// –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function showResults() {
    try {
        const detailedScore = game.calculateDetailedScore();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É
        const scoreElement = document.getElementById('final-score');
        if (scoreElement) {
            scoreElement.textContent = detailedScore.total.toString();
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–±–∏–≤–∫—É –æ—Ü–µ–Ω–∫–∏
        const baseScore = document.getElementById('base-score');
        const countryBonus = document.getElementById('country-bonus');
        const decisionsBonus = document.getElementById('decisions-bonus');
        const consistencyBonus = document.getElementById('consistency-bonus');

        if (baseScore) baseScore.textContent = detailedScore.base;
        if (countryBonus) countryBonus.textContent = detailedScore.country;
        if (decisionsBonus) decisionsBonus.textContent = detailedScore.decisions;
        if (consistencyBonus) consistencyBonus.textContent = detailedScore.consistency;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        const finalIndicators = document.getElementById('final-indicators');
        if (finalIndicators) {
            const indicators = [
                {label: '–í–í–ü –∏–Ω–¥–µ–∫—Å', value: game.indicators.gdpIdx.toFixed(1)},
                {label: '–≠–∫—Å–ø–æ—Ä—Ç', value: game.indicators.expIdx.toFixed(1)},
                {label: '–ò–º–ø–æ—Ä—Ç', value: game.indicators.impIdx.toFixed(1)},
                {label: '–ò–Ω—Ñ–ª—è—Ü–∏—è', value: game.indicators.cpi.toFixed(1) + '%'},
                {label: '–ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞', value: game.indicators.unemployment.toFixed(1) + '%'},
                {label: '–î–æ–≤–µ—Ä–∏–µ', value: Math.round(game.trust) + '%'}
            ];

            finalIndicators.innerHTML = indicators.map(indicator => `
                <div class="final-indicator">
                    <div class="final-indicator-label">${indicator.label}</div>
                    <div class="final-indicator-value">${indicator.value}</div>
                </div>
            `).join('');
        }

        // –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫
        createPerformanceChart();

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
        generatePolicyAnalysis(detailedScore);

        console.log('Results shown');
    } catch (error) {
        console.error('Error showing results:', error);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function createPerformanceChart() {
    try {
        const canvas = document.getElementById('performance-chart');
        if (!canvas) {
            console.error('Chart canvas not found');
            return;
        }

        const ctx = canvas.getContext('2d');
        if (game.charts.performance) {
            game.charts.performance.destroy();
        }

        const labels = Array.from({length: game.totalTurns + 2}, (_, i) => `–•–æ–¥ ${i}`);

        game.charts.performance = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: '–í–í–ü –∏–Ω–¥–µ–∫—Å',
                        data: game.chartData.gdp,
                        borderColor: '#1FB8CD',
                        backgroundColor: 'rgba(31, 184, 205, 0.1)',
                        tension: 0.3
                    },
                    {
                        label: '–≠–∫—Å–ø–æ—Ä—Ç',
                        data: game.chartData.export,
                        borderColor: '#FFC185',
                        backgroundColor: 'rgba(255, 193, 133, 0.1)',
                        tension: 0.3
                    },
                    {
                        label: '–ò–º–ø–æ—Ä—Ç',
                        data: game.chartData.import,
                        borderColor: '#B4413C',
                        backgroundColor: 'rgba(180, 65, 60, 0.1)',
                        tension: 0.3
                    },
                    {
                        label: '–ò–Ω—Ñ–ª—è—Ü–∏—è (%)',
                        data: game.chartData.inflation,
                        borderColor: '#FF6B6B',
                        backgroundColor: 'rgba(255, 107, 107, 0.1)',
                        tension: 0.3
                    },
                    {
                        label: '–ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞ (%)',
                        data: game.chartData.unemployment,
                        borderColor: '#4ECDC4',
                        backgroundColor: 'rgba(78, 205, 196, 0.1)',
                        tension: 0.3
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: false
                    }
                },
                plugins: {
                    legend: {
                        position: 'top'
                    }
                }
            }
        });

        console.log('Performance chart created');
    } catch (error) {
        console.error('Error creating performance chart:', error);
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª–∏—Ç–∏–∫–∏
function generatePolicyAnalysis(score) {
    try {
        let analysis = `
            <div class="analysis-card">
                <h4>üéØ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞</h4>
                <p>–í–∞—à–∞ —Ç–æ—Ä–≥–æ–≤–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –≤ —Ä–æ–ª–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞ ${COUNTRIES[game.selectedCountry].name} 
                –ø–æ–∫–∞–∑–∞–ª–∞ <strong>${getPerformanceLevel(score.total)}</strong> —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.</p>
            </div>
        `;

        // –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º
        if (game.indicators.gdpIdx > 110) {
            analysis += `
                <div class="analysis-card success">
                    <h4>üìà –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç</h4>
                    <p><strong>–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ:</strong> –í–í–ü –≤—ã—Ä–æ—Å –Ω–∞ ${(game.indicators.gdpIdx - 100).toFixed(1)}%. 
                    –í–∞—à–∏ —Ä–µ—à–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–ª–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ø–æ–≤—ã—Å–∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.</p>
                </div>
            `;
        } else if (game.indicators.gdpIdx < 90) {
            analysis += `
                <div class="analysis-card warning">
                    <h4>üìâ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏</h4>
                    <p><strong>–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è:</strong> –í–í–ü —Å–Ω–∏–∑–∏–ª—Å—è –Ω–∞ ${(100 - game.indicators.gdpIdx).toFixed(1)}%. 
                    –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ—Ç–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç—Å–∫–∏–µ –º–µ—Ä—ã –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–µ —à–æ–∫–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ –ø–æ–≤–ª–∏—è–ª–∏ –Ω–∞ —ç–∫–æ–Ω–æ–º–∏–∫—É.</p>
                </div>
            `;
        }

        if (game.indicators.expIdx > 120) {
            analysis += `
                <div class="analysis-card success">
                    <h4>üöÄ –≠–∫—Å–ø–æ—Ä—Ç–Ω—ã–π —É—Å–ø–µ—Ö</h4>
                    <p><strong>–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</strong> –≠–∫—Å–ø–æ—Ä—Ç –≤—ã—Ä–æ—Å –Ω–∞ ${(game.indicators.expIdx - 100).toFixed(1)}%. 
                    –í–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ —É–∫—Ä–µ–ø–∏–ª–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –º–∏—Ä–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö.</p>
                </div>
            `;
        }

        if (game.indicators.cpi > 4) {
            analysis += `
                <div class="analysis-card warning">
                    <h4>üí∞ –ò–Ω—Ñ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏</h4>
                    <p><strong>–í—ã—Å–æ–∫–∞—è –∏–Ω—Ñ–ª—è—Ü–∏—è:</strong> ${game.indicators.cpi.toFixed(1)}% —Ç—Ä–µ–±—É–µ—Ç –º–µ—Ä –ø–æ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω. 
                    –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–∂–µ—Å—Ç–æ—á–µ–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω–æ-–∫—Ä–µ–¥–∏—Ç–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏.</p>
                </div>
            `;
        }

        if (game.indicators.unemployment > 8) {
            analysis += `
                <div class="analysis-card warning">
                    <h4>üë• –ü—Ä–æ–±–ª–µ–º—ã –∑–∞–Ω—è—Ç–æ—Å—Ç–∏</h4>
                    <p><strong>–í—ã—Å–æ–∫–∞—è –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞:</strong> ${game.indicators.unemployment.toFixed(1)}% —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ 
                    —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä—ã–Ω–∫–∞ —Ç—Ä—É–¥–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–µ—Ä–µ–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø—Ä–æ—Å–∞.</p>
                </div>
            `;
        }

        // –ê–Ω–∞–ª–∏–∑ –¥–æ–≤–µ—Ä–∏—è
        if (game.trust > 70) {
            analysis += `
                <div class="analysis-card success">
                    <h4>ü§ù –î–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É—Å–ø–µ—Ö</h4>
                    <p><strong>–í—ã—Å–æ–∫–æ–µ –¥–æ–≤–µ—Ä–∏–µ:</strong> ${Math.round(game.trust)}% –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ 
                    –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–æ–≥–ª–∞—à–µ–Ω–∏–π.</p>
                </div>
            `;
        } else if (game.trust < 30) {
            analysis += `
                <div class="analysis-card warning">
                    <h4>‚ö†Ô∏è –î–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</h4>
                    <p><strong>–ù–∏–∑–∫–æ–µ –¥–æ–≤–µ—Ä–∏–µ:</strong> ${Math.round(game.trust)}% –º–æ–∂–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å 
                    —Ç–æ—Ä–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —É—Å–ª–æ–∂–Ω–∏—Ç—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã –≤ –±—É–¥—É—â–µ–º.</p>
                </div>
            `;
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        analysis += `
            <div class="analysis-card info">
                <h4>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è</h4>
                <ul>
                    ${score.total < 60 ? '<li>–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –º–µ–∂–¥—É –ø—Ä–æ—Ç–µ–∫—Ü–∏–æ–Ω–∏–∑–º–æ–º –∏ –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å—é</li>' : ''}
                    ${game.indicators.cpi > 3 ? '<li>–ü—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—é –∏–Ω—Ñ–ª—è—Ü–∏–∏</li>' : ''}
                    ${game.trust < 50 ? '<li>–£–ª—É—á—à–∏—Ç–µ –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–Ω–æ–≥–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è</li>' : ''}
                    ${game.indicators.unemployment > 6 ? '<li>–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –∏ –ø–µ—Ä–µ–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏</li>' : ''}
                    <li>–ò–∑—É—á–∏—Ç–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é —Ç–µ–æ—Ä–∏—é –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –±–æ–ª–µ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π</li>
                </ul>
            </div>
        `;

        const analysisElement = document.getElementById('policy-analysis');
        if (analysisElement) {
            analysisElement.innerHTML = analysis;
        }

        console.log('Policy analysis generated');
    } catch (error) {
        console.error('Error generating policy analysis:', error);
    }
}

function getPerformanceLevel(score) {
    if (score >= 80) return "–≤—ã–¥–∞—é—â–∏–µ—Å—è";
    if (score >= 60) return "—Ö–æ—Ä–æ—à–∏–µ";
    if (score >= 40) return "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ";
    return "–Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ";
}

// –≠–∫—Å–ø–æ—Ä—Ç PDF
function exportPDF() {
    try {
        if (!window.jspdf) {
            alert('PDF —Ñ—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            return;
        }

        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();
        const studentName = document.getElementById('student-name')?.value || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        const studentGroup = document.getElementById('student-group')?.value || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        doc.setFontSize(20);
        doc.setTextColor(31, 128, 141);
        doc.text('üåç –¢–æ—Ä–≥–æ–≤—ã–µ –≤–æ–π–Ω—ã V4.0', 20, 20);
        doc.setTextColor(0, 0, 0);
        
        doc.setFontSize(14);
        doc.text('–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –ø—Ä–∏ –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–µ –†–§', 20, 30);

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
        doc.setFontSize(12);
        doc.text(`–°—Ç—É–¥–µ–Ω—Ç: ${studentName}`, 20, 50);
        doc.text(`–ì—Ä—É–ø–ø–∞: ${studentGroup}`, 20, 60);
        doc.text(`–î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}`, 20, 70);

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ
        doc.setFontSize(14);
        doc.setTextColor(31, 128, 141);
        doc.text('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã', 20, 90);
        doc.setTextColor(0, 0, 0);
        doc.setFontSize(12);

        doc.text(`–°—Ç—Ä–∞–Ω–∞: ${COUNTRIES[game.selectedCountry].name} ${COUNTRIES[game.selectedCountry].flag}`, 20, 105);
        doc.text(`–†–µ–∂–∏–º: ${game.selectedMode} (${game.totalTurns} —Ö–æ–¥–æ–≤ = ${game.totalYears} –ª–µ—Ç)`, 20, 115);
        
        const detailedScore = game.calculateDetailedScore();
        doc.setFontSize(16);
        doc.setTextColor(31, 128, 141);
        doc.text(`–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: ${detailedScore.total}/100`, 20, 130);
        doc.setTextColor(0, 0, 0);
        doc.setFontSize(12);

        // –†–∞–∑–±–∏–≤–∫–∞ –æ—Ü–µ–Ω–∫–∏
        doc.text('–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ü–µ–Ω–∫–∏:', 20, 145);
        doc.text(`‚Ä¢ –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏: ${detailedScore.base}/60`, 25, 155);
        doc.text(`‚Ä¢ –ë–æ–Ω—É—Å –∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω—ã: ${detailedScore.country}/15`, 25, 165);
        doc.text(`‚Ä¢ –ë–æ–Ω—É—Å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏–π: ${detailedScore.decisions}/20`, 25, 175);
        doc.text(`‚Ä¢ –ë–æ–Ω—É—Å –∑–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${detailedScore.consistency}/5`, 25, 185);

        // –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        doc.setFontSize(14);
        doc.setTextColor(31, 128, 141);
        doc.text('–§–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:', 20, 205);
        doc.setTextColor(0, 0, 0);
        doc.setFontSize(12);

        doc.text(`–í–í–ü –∏–Ω–¥–µ–∫—Å: ${game.indicators.gdpIdx.toFixed(1)}`, 25, 220);
        doc.text(`–≠–∫—Å–ø–æ—Ä—Ç: ${game.indicators.expIdx.toFixed(1)}`, 25, 230);
        doc.text(`–ò–º–ø–æ—Ä—Ç: ${game.indicators.impIdx.toFixed(1)}`, 25, 240);
        doc.text(`–ò–Ω—Ñ–ª—è—Ü–∏—è: ${game.indicators.cpi.toFixed(1)}%`, 100, 220);
        doc.text(`–ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞: ${game.indicators.unemployment.toFixed(1)}%`, 100, 230);
        doc.text(`–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è: ${Math.round(game.trust)}%`, 100, 240);

        // –ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ª–æ–≥–∞ —Ä–µ—à–µ–Ω–∏–π
        doc.addPage();
        doc.setFontSize(16);
        doc.setTextColor(31, 128, 141);
        doc.text('–õ–æ–≥ –ø—Ä–∏–Ω—è—Ç—ã—Ö —Ä–µ—à–µ–Ω–∏–π', 20, 20);
        doc.setTextColor(0, 0, 0);

        let y = 35;
        game.gameLog.forEach((log, index) => {
            if (y > 270) {
                doc.addPage();
                y = 20;
            }

            doc.setFontSize(12);
            doc.setFont('helvetica', 'bold');
            doc.text(`–•–æ–¥ ${log.turn} (–ì–æ–¥ ${log.year}): ${log.scenario}`, 20, y);
            doc.setFont('helvetica', 'normal');
            doc.text(`–†–µ—à–µ–Ω–∏–µ: ${log.choice}`, 20, y + 10);
            
            // –≠—Ñ—Ñ–µ–∫—Ç—ã
            const effects = Object.entries(log.effects)
                .filter(([key, value]) => key !== 'trust' && typeof value === 'number')
                .map(([key, value]) => {
                    const prefix = value > 0 ? '+' : '';
                    const suffix = (key === 'cpi' || key === 'unemployment') ? '%' : '';
                    return `${key.toUpperCase()}: ${prefix}${value.toFixed(1)}${suffix}`;
                })
                .join(', ');
            
            doc.setFontSize(10);
            doc.text(`–≠—Ñ—Ñ–µ–∫—Ç—ã: ${effects}`, 20, y + 20);
            y += 35;
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        doc.save(`–¢–æ—Ä–≥–æ–≤—ã–µ_–≤–æ–π–Ω—ã_V4_${studentName.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.pdf`);

        console.log('PDF exported successfully');
    } catch (error) {
        console.error('Error exporting PDF:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ PDF');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–∞ —Ö–æ–¥–æ–≤
function exportGameLog() {
    try {
        let logContent = `–¢–æ—Ä–≥–æ–≤—ã–µ –≤–æ–π–Ω—ã V4.0 - –õ–æ–≥ –∏–≥—Ä—ã\n`;
        logContent += `–°—Ç—É–¥–µ–Ω—Ç: ${document.getElementById('student-name')?.value || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
        logContent += `–ì—Ä—É–ø–ø–∞: ${document.getElementById('student-group')?.value || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
        logContent += `–î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}\n`;
        logContent += `–°—Ç—Ä–∞–Ω–∞: ${COUNTRIES[game.selectedCountry].name}\n`;
        logContent += `–†–µ–∂–∏–º: ${game.selectedMode}\n`;
        logContent += `–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: ${game.calculateDetailedScore().total}/100\n\n`;

        logContent += `=== –î–ï–¢–ê–õ–¨–ù–´–ô –õ–û–ì –†–ï–®–ï–ù–ò–ô ===\n\n`;

        game.gameLog.forEach((log, index) => {
            logContent += `–•–û–î ${log.turn} (–ì–û–î ${log.year})\n`;
            logContent += `–°—Ü–µ–Ω–∞—Ä–∏–π: ${log.scenario}\n`;
            logContent += `–í—ã–±—Ä–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: ${log.choice}\n`;
            logContent += `–≠—Ñ—Ñ–µ–∫—Ç—ã:\n`;
            
            Object.entries(log.effects).forEach(([key, value]) => {
                if (typeof value === 'number') {
                    const prefix = value > 0 ? '+' : '';
                    const suffix = (key === 'cpi' || key === 'unemployment') ? '%' : '';
                    logContent += `  ${key.toUpperCase()}: ${prefix}${value.toFixed(1)}${suffix}\n`;
                }
            });
            
            logContent += `–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —Ç–µ–æ—Ä–∏—è: ${log.theory}\n`;
            logContent += `–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä: ${log.history}\n`;
            logContent += `–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ—Å–ª–µ —Ö–æ–¥–∞:\n`;
            logContent += `  –í–í–ü: ${log.indicators.gdpIdx.toFixed(1)}\n`;
            logContent += `  –≠–∫—Å–ø–æ—Ä—Ç: ${log.indicators.expIdx.toFixed(1)}\n`;
            logContent += `  –ò–º–ø–æ—Ä—Ç: ${log.indicators.impIdx.toFixed(1)}\n`;
            logContent += `  –ò–Ω—Ñ–ª—è—Ü–∏—è: ${log.indicators.cpi.toFixed(1)}%\n`;
            logContent += `  –ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞: ${log.indicators.unemployment.toFixed(1)}%\n`;
            logContent += `  –î–æ–≤–µ—Ä–∏–µ: ${Math.round(log.trust)}%\n`;
            logContent += `\n${'='.repeat(50)}\n\n`;
        });

        // –°–æ–∑–¥–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        const blob = new Blob([logContent], { type: 'text/plain;charset=utf-8' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `–¢–æ—Ä–≥–æ–≤—ã–µ_–≤–æ–π–Ω—ã_V4_–ª–æ–≥_${new Date().toISOString().split('T')[0]}.txt`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);

        console.log('Game log exported successfully');
    } catch (error) {
        console.error('Error exporting game log:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ª–æ–≥–∞ –∏–≥—Ä—ã');
    }
}

// –ù–æ–≤–∞—è –∏–≥—Ä–∞
function newGame() {
    try {
        game = new GameState();
        showScreen('start-screen');

        // –°–±—Ä–æ—Å –≤—ã–¥–µ–ª–µ–Ω–∏–π
        document.querySelectorAll('.country-card').forEach(card => {
            card.classList.remove('selected');
        });
        document.querySelectorAll('.mode-btn').forEach(btn => {
            btn.classList.remove('selected');
        });

        updateStartButton();
        console.log('New game initialized');
    } catch (error) {
        console.error('Error starting new game:', error);
    }
}

// –ü–∞—Å—Ö–∞–ª–∫–∞
let easterEggState = {
    keySequence: [],
    tapCount: 0,
    tapTimer: null,
    longPressTimer: null
};

function initializeEasterEgg() {
    try {
        // –î–µ—Å–∫—Ç–æ–ø: Ctrl+Shift+R -> –Ω–∞–±—Ä–∞—Ç—å "6tr0"
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey && e.shiftKey && e.key === 'R') {
                easterEggState.keySequence = [];
                e.preventDefault();
            } else if (easterEggState.keySequence.length < 4) {
                const target = ['6', 't', 'r', '0'];
                if (e.key === target[easterEggState.keySequence.length]) {
                    easterEggState.keySequence.push(e.key);
                    if (easterEggState.keySequence.length === 4) {
                        activateEasterEgg();
                    }
                } else {
                    easterEggState.keySequence = [];
                }
            }
        });

        // –ú–æ–±–∏–ª—å–Ω—ã–µ: 5 —Ç–∞–ø–æ–≤ + –¥–æ–ª–≥–∏–π —Ç–∞–ø –ø–æ –ª–æ–≥–æ—Ç–∏–ø—É
        const logo = document.getElementById('logo-container');
        if (logo) {
            logo.addEventListener('touchstart', (e) => {
                easterEggState.tapCount++;
                if (easterEggState.tapTimer) {
                    clearTimeout(easterEggState.tapTimer);
                }

                easterEggState.tapTimer = setTimeout(() => {
                    easterEggState.tapCount = 0;
                }, 2000);

                if (easterEggState.tapCount === 5) {
                    easterEggState.longPressTimer = setTimeout(() => {
                        activateEasterEgg();
                    }, 1000);
                }
            });

            logo.addEventListener('touchend', () => {
                if (easterEggState.longPressTimer) {
                    clearTimeout(easterEggState.longPressTimer);
                }
            });
        }

        console.log('Easter egg initialized');
    } catch (error) {
        console.error('Error initializing easter egg:', error);
    }
}

function activateEasterEgg() {
    try {
        const modal = document.getElementById('easter-egg-modal');
        if (modal) {
            modal.classList.remove('hidden');
        }

        easterEggState.keySequence = [];
        easterEggState.tapCount = 0;
        console.log('Easter egg activated!');
    } catch (error) {
        console.error('Error activating easter egg:', error);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    try {
        console.log('Initializing Trade Wars V4.0...');
        
        initializeTheme();
        initializeCountries();
        initializeModes();
        initializeEasterEgg();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        const themeToggle = document.getElementById('theme-toggle');
        if (themeToggle) {
            themeToggle.addEventListener('click', toggleTheme);
        }

        const startGameBtn = document.getElementById('start-game');
        if (startGameBtn) {
            startGameBtn.addEventListener('click', startGame);
        }

        const nextTurnBtn = document.getElementById('next-turn');
        if (nextTurnBtn) {
            nextTurnBtn.addEventListener('click', nextTurn);
        }

        const newGameBtn = document.getElementById('new-game');
        if (newGameBtn) {
            newGameBtn.addEventListener('click', newGame);
        }

        const exportBtn = document.getElementById('export-pdf');
        if (exportBtn) {
            exportBtn.addEventListener('click', exportPDF);
        }

        const exportLogBtn = document.getElementById('export-log');
        if (exportLogBtn) {
            exportLogBtn.addEventListener('click', exportGameLog);
        }

        const modalClose = document.getElementById('modal-close');
        if (modalClose) {
            modalClose.addEventListener('click', () => {
                const modal = document.getElementById('easter-egg-modal');
                if (modal) {
                    modal.classList.add('hidden');
                }
            });
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        const easterEggModal = document.getElementById('easter-egg-modal');
        if (easterEggModal) {
            easterEggModal.addEventListener('click', (e) => {
                if (e.target.id === 'easter-egg-modal') {
                    easterEggModal.classList.add('hidden');
                }
            });
        }

        console.log('Trade Wars V4.0 initialized successfully');
    } catch (error) {
        console.error('Error initializing application:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    }
});